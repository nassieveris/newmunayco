<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\config_pages\Entity\ConfigPages;

function akw_preprocess(array &$variables, $hook) {
  $site_data = \Drupal\config_pages\Entity\ConfigPages::config('site_data');

  if ($site_data) {
    $variables['arkyweb'] = $site_data->hasField('field_sd_arkyweb') && !$site_data->get('field_sd_arkyweb')->isEmpty()
      ? $site_data->get('field_sd_arkyweb')->get(0)->value
      : '';
    $variables['telefono'] = $site_data->hasField('field_sd_telefono') && !$site_data->get('field_sd_telefono')->isEmpty()
      ? $site_data->get('field_sd_telefono')->get(0)->value
      : '';
    $variables['email'] = $site_data->hasField('field_sd_email') && !$site_data->get('field_sd_email')->isEmpty()
      ? $site_data->get('field_sd_email')->get(0)->value
      : '';
    $variables['isotipo'] = $site_data->hasField('field_sd_isotipo') && !$site_data->get('field_sd_isotipo')->isEmpty()
      ? $site_data->get('field_sd_isotipo')->get(0)->value
      : '';
    $variables['logotipo'] = $site_data->hasField('field_sd_logotipo') && !$site_data->get('field_sd_logotipo')->isEmpty()
      ? $site_data->get('field_sd_logotipo')->get(0)->value
      : '';
    $variables['#cache']['tags'][] = 'config_pages:' . $site_data->id();
  }
  else {
    // Provide default values or handle the absence of the configuration page.
    $variables['arkyweb'] = '';
    $variables['telefono'] = '';
    $variables['email'] = '';
    $variables['isotipo'] = '';
    $variables['logotipo'] = '';
  }

  // Preprocess entity type for use in templates.
  $route_match = \Drupal::service('current_route_match');
  $entity_type = '';
  $parameters = $route_match->getParameters()->all(); // Convert ParameterBag to array.

  // Initialize specific variables.
  $variables['is_node'] = false;
  $variables['is_user'] = false;
  $variables['is_view'] = false;
  $variables['is_taxonomy'] = false;

  foreach ($parameters as $key => $value) {
    // Check if the parameter is an entity and determine its type.
    if ($value instanceof \Drupal\Core\Entity\EntityInterface) {
      $entity_type = 'entity_' . $value->getEntityTypeId();

      // Set specific variables based on the entity type.
      if ($value->getEntityTypeId() === 'node') {
        $variables['is_node'] = true;
        // Add content type as a class with the prefix 'node_'.
        $variables['node_type'] = 'node_' . $value->bundle();
      } elseif ($value->getEntityTypeId() === 'user') {
        $variables['is_user'] = true;
      } elseif ($value->getEntityTypeId() === 'taxonomy_term') {
        $variables['is_taxonomy'] = true;
      }
      break;
    }
  }

  // Dynamically check if the current route is a view.
  $route_name = $route_match->getRouteName() ?? '';
  if (empty($entity_type) && strpos($route_name, 'view.') === 0) {
    $entity_type = 'entity_view';
    $variables['is_view'] = true;
  }

  $variables['entity_type'] = $entity_type;

  // Ensure node_type is always defined.
  if (!isset($variables['node_type'])) {
    $variables['node_type'] = '';
  }

  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
}

function akw_preprocess_html(&$variables) {
  $variables['#attached']['html_head_link'][] = [
    [
      'rel' => 'preload',
      'href' => '/themes/custom/akw/assets/css/styles.css',
      'as' => 'style',
      'onload' => "this.rel='stylesheet'"
    ],
    'styles_preload',
  ];

  $current_path = \Drupal::service('path.current')->getPath();
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

  // Verificar si la página es "contactenos"
  if ($alias === 'contactenos') {
    $variables['#attached']['html_head'][] = [
      [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => 'Contacto | María Munayco Consulting',
          'content' => 'Descripción personalizada para la página de contacto.',
        ],
      ],
      'metatag_description_contact',
    ];
  }
}


/**
 * Implements hook_preprocess_page().
 */
function akw_preprocess_page(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('munayco_blocks')) {
    // Process the Munayco Prefooter block.
    $prefooter_block = \Drupal::service('plugin.manager.block')->createInstance('munayco_prefooter');
    $rendered_prefooter = $prefooter_block->build();
    $variables['munayco_prefooter'] = !empty($rendered_prefooter)
      ? \Drupal::service('renderer')->render($rendered_prefooter)
      : '<div class="debug">Munayco Prefooter block is empty.</div>';

    // Process the Munayco 2Maria block.
    $maria_block = \Drupal::service('plugin.manager.block')->createInstance('munayco_2maria');
    $rendered_maria = $maria_block->build();
    $variables['munayco_2maria'] = !empty($rendered_maria)
      ? \Drupal::service('renderer')->render($rendered_maria)
      : '<div class="debug">Munayco 2Maria block is empty.</div>';

    // Process the Munayco 2Consultoria block.
    $consultoria_block = \Drupal::service('plugin.manager.block')->createInstance('munayco_2consultoria');
    $rendered_consultoria = $consultoria_block->build();
    $variables['munayco_2consultoria'] = !empty($rendered_consultoria)
      ? \Drupal::service('renderer')->render($rendered_consultoria)
      : '<div class="debug">Munayco 2Consultoria block is empty.</div>';
  }
}

/**
 * Implements hook_form_alter().
 */
function akw_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // Add the "form__table" class to the "feedback" contact form.
  if ($form_id === 'contact_message_feedback_form') {
    $form['#attributes']['class'][] = 'form__table';

    // Change the label "Su nombre" to "Nombres y Apellidos".
    if (isset($form['name']['#title'])) {
      $form['name']['#title'] = 'Nombres y Apellidos';
    }

    // Change the label "Su dirección de correo electrónico" to "Correo Electrónico".
    if (isset($form['mail']['#title'])) {
      $form['mail']['#title'] = 'Correo Electrónico';
    }

    // Add placeholder to the "name" field.
    if (isset($form['name'])) {
      if (!isset($form['name']['#attributes'])) {
        $form['name']['#attributes'] = [];
      }
      $form['name']['#attributes']['placeholder'] = 'Ej: Gia Brunela';
    }

    // Add placeholder to the "mail" field.
    if (isset($form['mail'])) {
      if (!isset($form['mail']['#attributes'])) {
        $form['mail']['#attributes'] = [];
      }
      $form['mail']['#attributes']['placeholder'] = 'Ej: mimail@correo.pe';
    }
  }

  // Recursively add the required classes to all form elements.
  akw_add_classes_to_form($form);

  // Recursively add the "form_submit" class to all submit buttons.
  akw_add_submit_class($form);
}

/**
 * Recursively updates the label of a specific field in a form.
 *
 * @param array &$form
 *   The form array to process.
 * @param string $field_name
 *   The name of the field to update.
 * @param string $new_label
 *   The new label to set.
 */
function akw_update_field_label(array &$form, $field_name, $new_label) {
  foreach ($form as $key => &$element) {
    if (is_array($element)) {
      // Check if the current element matches the field name and update its label.
      if (isset($element['#type']) && $key === $field_name && isset($element['#title'])) {
        $element['#title'] = $new_label;
        return;
      }
      // Recurse into child elements.
      akw_update_field_label($element, $field_name, $new_label);
    }
  }
}

/**
 * Recursively adds the "form_item", "form_div_item", and "form_label" classes to form elements.
 *
 * @param array &$form
 *   The form array to process.
 */
function akw_add_classes_to_form(array &$form) {
  foreach ($form as &$element) {
    if (is_array($element)) {
      // Add the "form_item" class to input elements.
      if (isset($element['#type']) && in_array($element['#type'], ['textfield', 'textarea', 'email', 'number', 'password', 'tel', 'url'])) {
        if (!isset($element['#attributes']['class'])) {
          $element['#attributes']['class'] = [];
        }
        $element['#attributes']['class'][] = 'form_item';
      }

      // Add the "form_label" class to labels by modifying #title.
      if (isset($element['#title']) && isset($element['#type']) && $element['#type'] !== 'hidden') {
        $element['#title'] = '<span class="form_label">' . $element['#title'] . '</span>';
      }

      // Add the "form_div_item" class to wrappers.
      if (isset($element['#type']) && $element['#type'] !== 'hidden') {
        if (!isset($element['#wrapper_attributes']['class'])) {
          $element['#wrapper_attributes']['class'] = [];
        }
        $element['#wrapper_attributes']['class'][] = 'form_div_item';
      }

      // Recurse into child elements.
      if (!empty($element) && is_array($element)) {
        akw_add_classes_to_form($element);
      }
    }
  }
}

/**
 * Recursively adds the "form_submit" class to all submit buttons in a form.
 *
 * @param array &$form
 *   The form array to process.
 */
function akw_add_submit_class(array &$form) {
  foreach ($form as &$element) {
    if (is_array($element)) {
      // Check if the element is a submit button.
      if (isset($element['#type']) && $element['#type'] === 'submit') {
        if (!isset($element['#attributes']['class'])) {
          $element['#attributes']['class'] = [];
        }
        $element['#attributes']['class'][] = 'form_submit';
      }
      // Recurse into child elements.
      if (!empty($element) && is_array($element)) {
        akw_add_submit_class($element);
      }
    }
  }
}
